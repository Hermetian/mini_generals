{"version":3,"file":"index-c295be52.js","sources":["../../node_modules/uuid/dist/esm-browser/stringify.js","../../node_modules/uuid/dist/esm-browser/rng.js","../../node_modules/uuid/dist/esm-browser/native.js","../../node_modules/uuid/dist/esm-browser/v4.js","../../src/game/types.ts","../../src/game/engine.ts","../../src/game/renderer.ts","../../src/game/controller.ts","../../src/game/main.ts"],"sourcesContent":["import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n","let getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default { randomUUID };\n","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n","export enum UnitType {\n  SOLDIER = 'SOLDIER',\n  TANK = 'TANK',\n  HELICOPTER = 'HELICOPTER',\n}\n\nexport enum FactionType {\n  USA = 'USA',\n  CHINA = 'CHINA',\n  GLA = 'GLA',\n}\n\nexport enum ResourceType {\n  MONEY = 'MONEY',\n}\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport interface Player {\n  id: string;\n  name: string;\n  faction: FactionType;\n  resources: {\n    [ResourceType.MONEY]: number;\n  };\n  units: Unit[];\n  basePosition: Position;\n  color: string;\n}\n\nexport interface Unit {\n  id: string;\n  type: UnitType;\n  position: Position;\n  health: number;\n  maxHealth: number;\n  attack: number;\n  defense: number;\n  range: number;\n  speed: number;\n  playerId: string;\n  targetId?: string;\n  path?: Position[];\n  isDead: boolean;\n  isMoving: boolean;\n  isAttacking: boolean;\n  canAttackAir: boolean;\n  canAttackGround: boolean;\n}\n\nexport interface Resource {\n  id: string;\n  type: ResourceType;\n  position: Position;\n  amount: number;\n  respawnTime: number;\n  isCollected: boolean;\n}\n\nexport interface GameState {\n  players: { [id: string]: Player };\n  units: { [id: string]: Unit };\n  resources: { [id: string]: Resource };\n  gameTime: number;\n  mapSize: {\n    width: number;\n    height: number;\n  };\n}\n\nexport interface UnitCost {\n  [ResourceType.MONEY]: number;\n} ","import { v4 as uuidv4 } from 'uuid';\nimport {\n  GameState,\n  Unit,\n  Position,\n  Player,\n  Resource,\n  UnitType,\n  FactionType,\n  ResourceType,\n  UnitCost\n} from './types';\n\n// Base costs for units\nconst BASE_UNIT_COSTS: Record<UnitType, UnitCost> = {\n  [UnitType.SOLDIER]: {\n    [ResourceType.MONEY]: 150,\n  },\n  [UnitType.TANK]: {\n    [ResourceType.MONEY]: 450,\n  },\n  [UnitType.HELICOPTER]: {\n    [ResourceType.MONEY]: 700,\n  },\n};\n\n// Unit stats\nconst UNIT_STATS: Record<UnitType, Omit<Unit, 'id' | 'position' | 'playerId' | 'targetId' | 'path' | 'isDead' | 'isMoving' | 'isAttacking'>> = {\n  [UnitType.SOLDIER]: {\n    type: UnitType.SOLDIER,\n    health: 100,\n    maxHealth: 100,\n    attack: 10,\n    defense: 5,\n    range: 3,\n    speed: 2,\n    canAttackAir: true,\n    canAttackGround: true,\n  },\n  [UnitType.TANK]: {\n    type: UnitType.TANK,\n    health: 300,\n    maxHealth: 300,\n    attack: 30,\n    defense: 20,\n    range: 5,\n    speed: 1.5,\n    canAttackAir: false,\n    canAttackGround: true,\n  },\n  [UnitType.HELICOPTER]: {\n    type: UnitType.HELICOPTER,\n    health: 200,\n    maxHealth: 200,\n    attack: 25,\n    defense: 10,\n    range: 7,\n    speed: 3,\n    canAttackAir: true,\n    canAttackGround: true,\n  },\n};\n\n// Resource generation config\nconst RESOURCE_CONFIG = {\n  respawnTime: 30, // seconds\n  resourceAmount: {\n    [ResourceType.MONEY]: 150,\n  },\n  mapResourceCount: {\n    [ResourceType.MONEY]: 15,\n  },\n};\n\nexport class GameEngine {\n  private state: GameState;\n  private lastUpdateTime: number;\n  private resourceSpots: Position[] = [];\n\n  constructor(mapWidth: number, mapHeight: number) {\n    this.state = {\n      players: {},\n      units: {},\n      resources: {},\n      gameTime: 0,\n      mapSize: {\n        width: mapWidth,\n        height: mapHeight,\n      },\n    };\n    this.lastUpdateTime = Date.now();\n    this.generateResourceSpots();\n  }\n\n  // Initialize resource positions\n  private generateResourceSpots(): void {\n    const { width, height } = this.state.mapSize;\n    const totalSpots = RESOURCE_CONFIG.mapResourceCount[ResourceType.MONEY];\n    \n    // Create resource positions around the map\n    for (let i = 0; i < totalSpots; i++) {\n      const margin = 100; // Keep resources away from edges\n      const position: Position = {\n        x: Math.random() * (width - 2 * margin) + margin,\n        y: Math.random() * (height - 2 * margin) + margin,\n      };\n      this.resourceSpots.push(position);\n    }\n    \n    // Generate initial resources\n    this.spawnResources();\n  }\n\n  // Create resources on the map\n  private spawnResources(): void {\n    const moneyCount = RESOURCE_CONFIG.mapResourceCount[ResourceType.MONEY];\n    \n    // Create money resources\n    for (let i = 0; i < moneyCount; i++) {\n      const resource: Resource = {\n        id: uuidv4(),\n        type: ResourceType.MONEY,\n        position: this.resourceSpots[i],\n        amount: RESOURCE_CONFIG.resourceAmount[ResourceType.MONEY],\n        respawnTime: RESOURCE_CONFIG.respawnTime,\n        isCollected: false,\n      };\n      this.state.resources[resource.id] = resource;\n    }\n  }\n\n  // Get current game state\n  public getState(): GameState {\n    return this.state;\n  }\n\n  // Add a player to the game\n  public addPlayer(name: string, faction: FactionType): string {\n    const playerId = uuidv4();\n    const { width, height } = this.state.mapSize;\n    \n    // Generate random base position\n    const basePosition: Position = {\n      x: Math.random() * (width - 200) + 100,\n      y: Math.random() * (height - 200) + 100,\n    };\n    \n    // Generate random color for player\n    const playerColors = [\n      '#FF5733', // Red\n      '#33FF57', // Green\n      '#3357FF', // Blue\n      '#F3FF33', // Yellow\n      '#FF33F3', // Pink\n    ];\n    \n    const color = playerColors[Object.keys(this.state.players).length % playerColors.length];\n    \n    const player: Player = {\n      id: playerId,\n      name,\n      faction,\n      resources: {\n        [ResourceType.MONEY]: 800, // Starting money (increased since it's the only resource now)\n      },\n      units: [],\n      basePosition,\n      color,\n    };\n    \n    this.state.players[playerId] = player;\n    \n    // Create initial units for the player\n    this.createUnit(playerId, UnitType.SOLDIER, {\n      x: basePosition.x - 20,\n      y: basePosition.y - 20,\n    });\n    \n    this.createUnit(playerId, UnitType.SOLDIER, {\n      x: basePosition.x + 20,\n      y: basePosition.y - 20,\n    });\n    \n    this.createUnit(playerId, UnitType.TANK, {\n      x: basePosition.x,\n      y: basePosition.y + 20,\n    });\n    \n    return playerId;\n  }\n\n  // Create a new unit for a player\n  public createUnit(playerId: string, unitType: UnitType, position: Position): string | null {\n    const player = this.state.players[playerId];\n    if (!player) return null;\n    \n    // Calculate cost scaling based on number of units\n    const scalingFactor = 1 + (player.units.length * 0.1); // 10% increase per unit\n    const unitCost = {\n      [ResourceType.MONEY]: Math.floor(BASE_UNIT_COSTS[unitType][ResourceType.MONEY] * scalingFactor),\n    };\n    \n    // Check if player has enough resources\n    if (\n      player.resources[ResourceType.MONEY] < unitCost[ResourceType.MONEY]\n    ) {\n      return null; // Not enough resources\n    }\n    \n    // Deduct resources\n    player.resources[ResourceType.MONEY] -= unitCost[ResourceType.MONEY];\n    \n    // Create unit\n    const unitId = uuidv4();\n    const unitStats = UNIT_STATS[unitType];\n    \n    const unit: Unit = {\n      id: unitId,\n      ...unitStats,\n      position,\n      playerId,\n      isDead: false,\n      isMoving: false,\n      isAttacking: false,\n    };\n    \n    this.state.units[unitId] = unit;\n    player.units.push(unit);\n    \n    return unitId;\n  }\n\n  // Move a unit to a new position\n  public moveUnit(unitId: string, targetPosition: Position): boolean {\n    const unit = this.state.units[unitId];\n    if (!unit || unit.isDead) return false;\n    \n    // Calculate path (simple direct path for now)\n    unit.path = [targetPosition];\n    unit.isMoving = true;\n    unit.isAttacking = false;\n    unit.targetId = undefined;\n    \n    return true;\n  }\n\n  // Command a unit to attack an enemy unit\n  public attackUnit(attackerId: string, targetId: string): boolean {\n    const attacker = this.state.units[attackerId];\n    const target = this.state.units[targetId];\n    \n    if (\n      !attacker || \n      !target || \n      attacker.isDead || \n      target.isDead || \n      attacker.playerId === target.playerId\n    ) {\n      return false;\n    }\n    \n    // Check if this unit can attack the target type\n    if (!this.canUnitAttackTarget(attacker, target)) {\n      return false;\n    }\n    \n    attacker.targetId = targetId;\n    attacker.isAttacking = true;\n    \n    return true;\n  }\n\n  // Update the game state (called on each frame)\n  public update(): void {\n    const currentTime = Date.now();\n    const deltaTime = (currentTime - this.lastUpdateTime) / 1000; // Convert to seconds\n    this.lastUpdateTime = currentTime;\n    \n    this.state.gameTime += deltaTime;\n    \n    this.updateUnits(deltaTime);\n    this.updateResources(deltaTime);\n    this.collectResources();\n  }\n\n  // Update all units (movement, combat, etc.)\n  private updateUnits(deltaTime: number): void {\n    Object.values(this.state.units).forEach(unit => {\n      if (unit.isDead) return;\n      \n      // First check if the unit should auto-acquire a target\n      this.checkForAutoTarget(unit);\n      \n      // Handle movement\n      if (unit.isMoving && unit.path && unit.path.length > 0) {\n        const targetPos = unit.path[0];\n        \n        // Calculate direction and distance\n        const dx = targetPos.x - unit.position.x;\n        const dy = targetPos.y - unit.position.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance < 1) {\n          // Reached destination\n          unit.path.shift();\n          if (unit.path.length === 0) {\n            unit.isMoving = false;\n          }\n        } else {\n          // Move towards destination\n          const moveDistance = unit.speed * deltaTime * 60;\n          const ratio = Math.min(moveDistance / distance, 1);\n          \n          unit.position.x += dx * ratio;\n          unit.position.y += dy * ratio;\n        }\n      }\n      \n      // Handle combat\n      if (unit.isAttacking && unit.targetId) {\n        const target = this.state.units[unit.targetId];\n        \n        if (!target || target.isDead) {\n          unit.isAttacking = false;\n          unit.targetId = undefined;\n          return;\n        }\n        \n        // Check if this unit can attack the target type\n        const canAttack = this.canUnitAttackTarget(unit, target);\n        if (!canAttack) {\n          unit.isAttacking = false;\n          unit.targetId = undefined;\n          return;\n        }\n        \n        // Calculate distance to target\n        const dx = target.position.x - unit.position.x;\n        const dy = target.position.y - unit.position.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance <= unit.range * 20) { // Range in game units\n          // Within attack range, deal damage\n          // Attack every second\n          if (Math.floor(this.state.gameTime) > Math.floor(this.state.gameTime - deltaTime)) {\n            const damage = Math.max(1, unit.attack - target.defense / 2);\n            target.health -= damage;\n            \n            if (target.health <= 0) {\n              target.health = 0;\n              target.isDead = true;\n              \n              // Remove dead unit from player's units array\n              const player = this.state.players[target.playerId];\n              if (player) {\n                player.units = player.units.filter(u => u.id !== target.id);\n              }\n            }\n          }\n        } else {\n          // Move towards target to get in range\n          const moveDistance = unit.speed * deltaTime * 60;\n          const ratio = Math.min(moveDistance / distance, 1);\n          \n          unit.position.x += dx * ratio;\n          unit.position.y += dy * ratio;\n        }\n      }\n    });\n  }\n\n  // Check if a unit should automatically acquire a target\n  private checkForAutoTarget(unit: Unit): void {\n    // Only look for targets if not already attacking or moving\n    if (unit.isAttacking || (unit.isMoving && !unit.isAttacking)) {\n      return;\n    }\n    \n    let nearestEnemy: Unit | null = null;\n    let nearestDistance: number = Infinity;\n    \n    // Find the nearest enemy within detection range\n    Object.values(this.state.units).forEach(otherUnit => {\n      if (\n        otherUnit.isDead || \n        otherUnit.playerId === unit.playerId\n      ) {\n        return;\n      }\n      \n      // Check if this unit can attack the other unit\n      if (!this.canUnitAttackTarget(unit, otherUnit)) {\n        return;\n      }\n      \n      const dx = otherUnit.position.x - unit.position.x;\n      const dy = otherUnit.position.y - unit.position.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      \n      // Auto-detect range is slightly larger than attack range\n      const detectionRange = unit.range * 25;\n      \n      if (distance <= detectionRange && distance < nearestDistance) {\n        nearestEnemy = otherUnit;\n        nearestDistance = distance;\n      }\n    });\n    \n    // If found an enemy in range, attack it\n    if (nearestEnemy) {\n      this.attackUnit(unit.id, nearestEnemy.id);\n    }\n  }\n  \n  // Check if a unit can attack a target based on unit type\n  private canUnitAttackTarget(attacker: Unit, target: Unit): boolean {\n    // Determine if target is air or ground\n    const isTargetAir = target.type === UnitType.HELICOPTER;\n    \n    if (isTargetAir) {\n      return attacker.canAttackAir;\n    } else {\n      return attacker.canAttackGround;\n    }\n  }\n\n  // Update resources (respawn collected resources)\n  private updateResources(deltaTime: number): void {\n    Object.values(this.state.resources).forEach(resource => {\n      if (resource.isCollected) {\n        resource.respawnTime -= deltaTime;\n        \n        if (resource.respawnTime <= 0) {\n          resource.isCollected = false;\n          resource.amount = RESOURCE_CONFIG.resourceAmount[resource.type];\n          resource.respawnTime = RESOURCE_CONFIG.respawnTime;\n        }\n      }\n    });\n  }\n\n  // Collect resources when units are near\n  private collectResources(): void {\n    const collectionRange = 30; // Units must be this close to collect\n    \n    Object.values(this.state.resources).forEach(resource => {\n      if (resource.isCollected) return;\n      \n      Object.values(this.state.players).forEach(player => {\n        // Check if any SOLDIER unit is near the resource (only soldiers can collect)\n        const nearbyUnit = player.units.find(unit => {\n          if (unit.isDead) return false;\n          // Only soldiers can collect resources\n          if (unit.type !== UnitType.SOLDIER) return false;\n          \n          const dx = unit.position.x - resource.position.x;\n          const dy = unit.position.y - resource.position.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          \n          return distance < collectionRange;\n        });\n        \n        if (nearbyUnit) {\n          // Collect the resource\n          player.resources[ResourceType.MONEY] += resource.amount;\n          resource.isCollected = true;\n        }\n      });\n    });\n  }\n\n  // Check if the game should end\n  private checkGameOver(): void {\n    const state = this.getState();\n    const activePlayers = Object.values(state.players).filter(player => \n      player.units.length > 0 || \n      player.resources[ResourceType.MONEY] >= 150\n    );\n    \n    // ... existing code ...\n  }\n} ","import { GameState, Unit, Resource, UnitType, ResourceType, Position } from './types';\n\n// Unit sprite dimensions\nconst UNIT_SIZE = {\n  [UnitType.SOLDIER]: { width: 20, height: 20 },\n  [UnitType.TANK]: { width: 30, height: 30 },\n  [UnitType.HELICOPTER]: { width: 25, height: 25 },\n};\n\n// Resource sprite dimensions\nconst RESOURCE_SIZE = {\n  [ResourceType.MONEY]: { width: 20, height: 20 },\n};\n\nexport class GameRenderer {\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n  private unitImages: Map<UnitType, HTMLImageElement> = new Map();\n  private resourceImages: Map<ResourceType, HTMLImageElement> = new Map();\n  private baseImage: HTMLImageElement;\n  private debugMode: boolean = false;\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Failed to get canvas context');\n    }\n    this.ctx = ctx;\n    \n    // Load unit images\n    this.loadUnitImages();\n    \n    // Load resource images\n    this.loadResourceImages();\n    \n    // Load base image\n    this.baseImage = new Image();\n    this.baseImage.src = '/mini_generals/assets/images/base.svg';\n  }\n\n  // Load unit images\n  private loadUnitImages(): void {\n    Object.values(UnitType).forEach(unitType => {\n      const img = new Image();\n      img.src = `/mini_generals/assets/images/${unitType.toLowerCase()}.svg`;\n      this.unitImages.set(unitType, img);\n    });\n  }\n\n  // Load resource images\n  private loadResourceImages(): void {\n    // Only load MONEY image since SUPPLIES has been removed\n    const img = new Image();\n    img.src = `/mini_generals/assets/images/${ResourceType.MONEY.toLowerCase()}.svg`;\n    this.resourceImages.set(ResourceType.MONEY, img);\n  }\n\n  // Set debug mode\n  public setDebugMode(enabled: boolean): void {\n    this.debugMode = enabled;\n  }\n\n  // Render the game state\n  public render(state: GameState): void {\n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    // Set canvas to match map dimensions\n    this.canvas.width = state.mapSize.width;\n    this.canvas.height = state.mapSize.height;\n    \n    // Draw background\n    this.drawBackground(state);\n    \n    // Draw resources\n    this.drawResources(state);\n    \n    // Draw player bases\n    this.drawBases(state);\n    \n    // Draw units\n    this.drawUnits(state);\n    \n    // Draw debug info if enabled\n    if (this.debugMode) {\n      this.drawDebugInfo(state);\n    }\n  }\n\n  // Draw the background\n  private drawBackground(state: GameState): void {\n    // Draw grass background\n    this.ctx.fillStyle = '#4a7c59'; // Green grass color\n    this.ctx.fillRect(0, 0, state.mapSize.width, state.mapSize.height);\n    \n    // Draw some random details to make the map more interesting\n    const details = 50;\n    this.ctx.fillStyle = '#3d6549'; // Darker grass patches\n    \n    for (let i = 0; i < details; i++) {\n      const x = Math.random() * state.mapSize.width;\n      const y = Math.random() * state.mapSize.height;\n      const size = Math.random() * 30 + 10;\n      \n      this.ctx.beginPath();\n      this.ctx.arc(x, y, size, 0, Math.PI * 2);\n      this.ctx.fill();\n    }\n  }\n\n  // Draw all resources\n  private drawResources(state: GameState): void {\n    Object.values(state.resources).forEach(resource => {\n      if (resource.isCollected) return; // Don't draw collected resources\n      \n      const img = this.resourceImages.get(resource.type);\n      if (!img) return;\n      \n      const size = RESOURCE_SIZE[resource.type];\n      \n      // Draw resource icon\n      this.ctx.drawImage(\n        img,\n        resource.position.x - size.width / 2,\n        resource.position.y - size.height / 2,\n        size.width,\n        size.height\n      );\n      \n      // Draw resource type indicator\n      this.ctx.font = '10px Arial';\n      this.ctx.fillStyle = 'white';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText(\n        resource.type === ResourceType.MONEY ? '$' : 'S',\n        resource.position.x,\n        resource.position.y - size.height\n      );\n    });\n  }\n\n  // Draw player bases\n  private drawBases(state: GameState): void {\n    Object.values(state.players).forEach(player => {\n      // Draw base\n      this.ctx.drawImage(\n        this.baseImage,\n        player.basePosition.x - 40,\n        player.basePosition.y - 40,\n        80,\n        80\n      );\n      \n      // Draw player name\n      this.ctx.font = '12px Arial';\n      this.ctx.fillStyle = player.color;\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText(\n        player.name,\n        player.basePosition.x,\n        player.basePosition.y - 50\n      );\n      \n      // Draw faction\n      this.ctx.font = '10px Arial';\n      this.ctx.fillText(\n        player.faction,\n        player.basePosition.x,\n        player.basePosition.y - 35\n      );\n    });\n  }\n\n  // Draw all units\n  private drawUnits(state: GameState): void {\n    // First draw attack lines\n    this.drawAttackLines(state);\n    \n    Object.values(state.units).forEach(unit => {\n      if (unit.isDead) return; // Don't draw dead units\n      \n      const player = state.players[unit.playerId];\n      if (!player) return;\n      \n      const unitImg = this.unitImages.get(unit.type);\n      if (!unitImg) return;\n      \n      const size = UNIT_SIZE[unit.type];\n      \n      // Draw unit\n      this.ctx.save();\n      \n      // Calculate rotation if unit is moving or attacking\n      if (unit.isMoving && unit.path && unit.path.length > 0) {\n        const targetPos = unit.path[0];\n        const angle = Math.atan2(\n          targetPos.y - unit.position.y,\n          targetPos.x - unit.position.x\n        );\n        \n        // Rotate around unit center\n        this.ctx.translate(unit.position.x, unit.position.y);\n        this.ctx.rotate(angle);\n        this.ctx.translate(-unit.position.x, -unit.position.y);\n      } else if (unit.isAttacking && unit.targetId) {\n        const target = state.units[unit.targetId];\n        if (target) {\n          const angle = Math.atan2(\n            target.position.y - unit.position.y,\n            target.position.x - unit.position.x\n          );\n          \n          // Rotate around unit center\n          this.ctx.translate(unit.position.x, unit.position.y);\n          this.ctx.rotate(angle);\n          this.ctx.translate(-unit.position.x, -unit.position.y);\n        }\n      }\n      \n      // Draw unit image\n      this.ctx.drawImage(\n        unitImg,\n        unit.position.x - size.width / 2,\n        unit.position.y - size.height / 2,\n        size.width,\n        size.height\n      );\n      \n      this.ctx.restore();\n      \n      // Draw health bar\n      const healthBarWidth = size.width;\n      const healthBarHeight = 4;\n      const healthPercent = unit.health / unit.maxHealth;\n      \n      // Health bar background\n      this.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n      this.ctx.fillRect(\n        unit.position.x - healthBarWidth / 2,\n        unit.position.y - size.height / 2 - 8,\n        healthBarWidth,\n        healthBarHeight\n      );\n      \n      // Health bar fill\n      this.ctx.fillStyle = healthPercent > 0.5 ? 'green' : healthPercent > 0.25 ? 'yellow' : 'red';\n      this.ctx.fillRect(\n        unit.position.x - healthBarWidth / 2,\n        unit.position.y - size.height / 2 - 8,\n        healthBarWidth * healthPercent,\n        healthBarHeight\n      );\n      \n      // Draw player color indicator\n      this.ctx.strokeStyle = player.color;\n      this.ctx.lineWidth = 2;\n      this.ctx.beginPath();\n      this.ctx.arc(\n        unit.position.x,\n        unit.position.y,\n        size.width / 2 + 2,\n        0,\n        Math.PI * 2\n      );\n      this.ctx.stroke();\n      \n      // Draw unit state indicators\n      if (unit.isAttacking) {\n        this.ctx.fillStyle = 'red';\n        this.ctx.beginPath();\n        this.ctx.arc(\n          unit.position.x + size.width / 2,\n          unit.position.y - size.height / 2,\n          3,\n          0,\n          Math.PI * 2\n        );\n        this.ctx.fill();\n      } else if (unit.isMoving) {\n        this.ctx.fillStyle = 'blue';\n        this.ctx.beginPath();\n        this.ctx.arc(\n          unit.position.x + size.width / 2,\n          unit.position.y - size.height / 2,\n          3,\n          0,\n          Math.PI * 2\n        );\n        this.ctx.fill();\n      }\n    });\n  }\n\n  // Draw attack lines between units and their targets\n  private drawAttackLines(state: GameState): void {\n    Object.values(state.units).forEach(unit => {\n      if (unit.isDead || !unit.isAttacking || !unit.targetId) return;\n      \n      const target = state.units[unit.targetId];\n      if (!target || target.isDead) return;\n      \n      // Draw attack line\n      this.ctx.beginPath();\n      this.ctx.moveTo(unit.position.x, unit.position.y);\n      this.ctx.lineTo(target.position.x, target.position.y);\n      \n      // Set line style based on unit type\n      if (unit.type === UnitType.SOLDIER) {\n        this.ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)'; // Yellow for soldiers\n        this.ctx.lineWidth = 1;\n      } else if (unit.type === UnitType.TANK) {\n        this.ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)'; // Red for tanks\n        this.ctx.lineWidth = 2;\n      } else if (unit.type === UnitType.HELICOPTER) {\n        this.ctx.strokeStyle = 'rgba(0, 255, 255, 0.5)'; // Cyan for helicopters\n        this.ctx.lineWidth = 1.5;\n      }\n      \n      this.ctx.stroke();\n      \n      // Draw an impact effect at the target for visual feedback\n      if (Math.random() < 0.2) { // Only show the effect occasionally for better visuals\n        this.ctx.beginPath();\n        this.ctx.arc(target.position.x, target.position.y, 5, 0, Math.PI * 2);\n        this.ctx.fillStyle = 'rgba(255, 100, 0, 0.7)';\n        this.ctx.fill();\n      }\n    });\n  }\n\n  // Draw debug information\n  private drawDebugInfo(state: GameState): void {\n    // Draw FPS and game time\n    this.ctx.font = '12px Arial';\n    this.ctx.fillStyle = 'white';\n    this.ctx.textAlign = 'left';\n    this.ctx.fillText(`Game Time: ${state.gameTime.toFixed(2)}s`, 10, 20);\n    \n    // Draw unit counts\n    let y = 40;\n    Object.values(state.players).forEach(player => {\n      this.ctx.fillStyle = player.color;\n      this.ctx.fillText(\n        `${player.name}: ${player.units.length} units`,\n        10,\n        y\n      );\n      y += 15;\n      \n      // Count unit types\n      const unitCounts = player.units.reduce<Record<UnitType, number>>(\n        (counts, unit) => {\n          counts[unit.type] = (counts[unit.type] || 0) + 1;\n          return counts;\n        },\n        {} as Record<UnitType, number>\n      );\n      \n      Object.entries(unitCounts).forEach(([type, count]) => {\n        this.ctx.fillText(`  ${type}: ${count}`, 20, y);\n        y += 15;\n      });\n      \n      // Show resources\n      this.ctx.fillText(\n        `  Money: ${player.resources[ResourceType.MONEY]}`,\n        20,\n        y\n      );\n      y += 25;\n    });\n  }\n\n  // Draw selection box\n  public drawSelectionBox(startPos: Position, endPos: Position): void {\n    const width = endPos.x - startPos.x;\n    const height = endPos.y - startPos.y;\n    \n    this.ctx.strokeStyle = 'white';\n    this.ctx.lineWidth = 1;\n    this.ctx.setLineDash([5, 3]);\n    this.ctx.strokeRect(startPos.x, startPos.y, width, height);\n    this.ctx.setLineDash([]);\n  }\n\n  // Highlight selected units\n  public highlightSelectedUnits(units: Unit[]): void {\n    units.forEach(unit => {\n      if (unit.isDead) return;\n      \n      const size = UNIT_SIZE[unit.type];\n      \n      // Draw selection circle\n      this.ctx.strokeStyle = 'white';\n      this.ctx.lineWidth = 2;\n      this.ctx.setLineDash([3, 2]);\n      this.ctx.beginPath();\n      this.ctx.arc(\n        unit.position.x,\n        unit.position.y,\n        size.width / 2 + 5,\n        0,\n        Math.PI * 2\n      );\n      this.ctx.stroke();\n      this.ctx.setLineDash([]);\n    });\n  }\n\n  // Draw game over screen\n  public drawGameOver(winner: string): void {\n    // Darken the screen\n    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    // Draw game over text\n    this.ctx.font = 'bold 36px Arial';\n    this.ctx.fillStyle = 'white';\n    this.ctx.textAlign = 'center';\n    this.ctx.fillText('Game Over', this.canvas.width / 2, this.canvas.height / 2 - 40);\n    \n    // Draw winner text\n    this.ctx.font = '24px Arial';\n    this.ctx.fillText(\n      `${winner} wins!`,\n      this.canvas.width / 2,\n      this.canvas.height / 2\n    );\n    \n    // Draw restart instructions\n    this.ctx.font = '18px Arial';\n    this.ctx.fillText(\n      'Click to play again',\n      this.canvas.width / 2,\n      this.canvas.height / 2 + 40\n    );\n  }\n} ","import { GameEngine } from './engine';\nimport { GameRenderer } from './renderer';\nimport { Position, Unit, UnitType, FactionType, ResourceType, GameState } from './types';\n\nexport class GameController {\n  private engine: GameEngine;\n  private renderer: GameRenderer;\n  private canvas: HTMLCanvasElement;\n  private playerId: string;\n  private isMouseDown: boolean = false;\n  private selectionStart: Position | null = null;\n  private selectedUnits: Unit[] = [];\n  private gameRunning: boolean = true;\n  private animationFrameId: number | null = null;\n\n  constructor(canvas: HTMLCanvasElement, mapWidth: number, mapHeight: number) {\n    this.canvas = canvas;\n    this.engine = new GameEngine(mapWidth, mapHeight);\n    this.renderer = new GameRenderer(canvas);\n    \n    // Set up event listeners\n    this.setupEventListeners();\n    \n    // Initialize player\n    this.playerId = this.engine.addPlayer('Player', FactionType.USA);\n    \n    // Add AI opponents\n    this.engine.addPlayer('AI 1', FactionType.CHINA);\n    this.engine.addPlayer('AI 2', FactionType.GLA);\n    \n    // Start game loop\n    this.startGameLoop();\n  }\n\n  // Exposed methods for main.ts\n  public getState(): GameState {\n    return this.engine.getState();\n  }\n\n  public getPlayerId(): string {\n    return this.playerId;\n  }\n\n  public createUnit(typeIndex: number): void {\n    if (!this.gameRunning) return;\n    \n    let unitType: UnitType;\n    \n    switch (typeIndex) {\n      case 0:\n        unitType = UnitType.SOLDIER;\n        break;\n      case 1:\n        unitType = UnitType.TANK;\n        break;\n      case 2:\n        unitType = UnitType.HELICOPTER;\n        break;\n      default:\n        return;\n    }\n    \n    const state = this.engine.getState();\n    const player = state.players[this.playerId];\n    \n    if (!player) return;\n    \n    // Get player base position\n    const basePosition = player.basePosition;\n    \n    // Create unit slightly offset from base\n    const randomOffset = () => Math.random() * 60 - 30;\n    const position = {\n      x: basePosition.x + randomOffset(),\n      y: basePosition.y + randomOffset(),\n    };\n    \n    // Create the unit\n    this.engine.createUnit(this.playerId, unitType, position);\n  }\n\n  // Set up event listeners for user input\n  private setupEventListeners(): void {\n    // Mouse down event for selection\n    this.canvas.addEventListener('mousedown', (event) => {\n      if (!this.gameRunning) return;\n      \n      // Prevent default browser scrolling behavior\n      event.preventDefault();\n      \n      const rect = this.canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      \n      this.isMouseDown = true;\n      this.selectionStart = { x, y };\n      \n      // If not holding shift, clear selection\n      if (!event.shiftKey) {\n        this.selectedUnits = [];\n      }\n    });\n    \n    // Mouse move event for selection box\n    this.canvas.addEventListener('mousemove', (event) => {\n      if (!this.gameRunning || !this.isMouseDown || !this.selectionStart) return;\n      \n      // Prevent default browser scrolling behavior\n      event.preventDefault();\n      \n      const rect = this.canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      \n      // Redraw the scene with selection box\n      this.renderGameWithSelectionBox({ x, y });\n    });\n    \n    // Mouse up event for finishing selection or issuing commands\n    this.canvas.addEventListener('mouseup', (event) => {\n      if (!this.gameRunning) {\n        // If game is over, restart on click\n        this.restartGame();\n        return;\n      }\n      \n      const rect = this.canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      \n      if (this.isMouseDown && this.selectionStart) {\n        // Selection mode\n        if (\n          Math.abs(x - this.selectionStart.x) > 5 ||\n          Math.abs(y - this.selectionStart.y) > 5\n        ) {\n          // Selection box drag\n          this.selectUnitsInBox(this.selectionStart, { x, y });\n        } else {\n          // Single click\n          this.handleSingleClick({ x, y }, event.shiftKey);\n        }\n      }\n      \n      this.isMouseDown = false;\n      this.selectionStart = null;\n    });\n    \n    // Right click for unit movement/attack\n    this.canvas.addEventListener('contextmenu', (event) => {\n      event.preventDefault();\n      \n      if (!this.gameRunning || this.selectedUnits.length === 0) return;\n      \n      const rect = this.canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      \n      // Always move on right-click, never attack\n      this.moveSelectedUnitsTo({ x, y });\n    });\n    \n    // Keyboard shortcuts\n    window.addEventListener('keydown', (event) => {\n      if (!this.gameRunning) return;\n      \n      switch (event.key) {\n        case 'Escape':\n          // Clear selection\n          this.selectedUnits = [];\n          break;\n          \n        case '1':\n        case '2':\n        case '3':\n          // Create units at base\n          this.createUnit(parseInt(event.key) - 1);\n          break;\n          \n        case 'd':\n          // Toggle debug mode\n          this.renderer.setDebugMode(true);\n          break;\n      }\n    });\n    \n    window.addEventListener('keyup', (event) => {\n      if (event.key === 'd') {\n        this.renderer.setDebugMode(false);\n      }\n    });\n  }\n\n  // Start the game loop\n  private startGameLoop(): void {\n    const gameLoop = () => {\n      if (!this.gameRunning) return;\n      \n      // Update game state\n      this.engine.update();\n      \n      // Render the game\n      this.renderer.render(this.engine.getState());\n      this.renderer.highlightSelectedUnits(this.selectedUnits);\n      \n      // Check for game over condition\n      this.checkGameOver();\n      \n      // Schedule next frame\n      this.animationFrameId = requestAnimationFrame(gameLoop);\n    };\n    \n    // Start the loop\n    this.animationFrameId = requestAnimationFrame(gameLoop);\n  }\n\n  // Render the game with a selection box\n  private renderGameWithSelectionBox(currentPos: Position): void {\n    if (!this.selectionStart) return;\n    \n    // Render the game\n    this.renderer.render(this.engine.getState());\n    \n    // Draw the selection box\n    this.renderer.drawSelectionBox(this.selectionStart, currentPos);\n    \n    // Highlight already selected units\n    this.renderer.highlightSelectedUnits(this.selectedUnits);\n  }\n\n  // Handle a single click (select a unit or target)\n  private handleSingleClick(position: Position, addToSelection: boolean): void {\n    const state = this.engine.getState();\n    \n    // Check if clicked on a unit\n    let clickedUnit: Unit | null = null;\n    \n    Object.values(state.units).forEach(unit => {\n      if (unit.isDead) return;\n      \n      const dx = position.x - unit.position.x;\n      const dy = position.y - unit.position.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      \n      // Simple circular hit detection\n      const hitRadius = unit.type === UnitType.TANK ? 15 : 10;\n      \n      if (distance <= hitRadius) {\n        clickedUnit = unit;\n      }\n    });\n    \n    if (clickedUnit) {\n      const unit = clickedUnit as Unit;\n      if (unit.playerId === this.playerId) {\n        // Select own unit\n        if (addToSelection) {\n          // Add to selection if not already selected\n          if (!this.selectedUnits.some(u => u.id === unit.id)) {\n            this.selectedUnits.push(unit);\n          }\n        } else {\n          // Replace selection\n          this.selectedUnits = [unit];\n        }\n      } else if (this.selectedUnits.length > 0) {\n        // Target enemy unit\n        this.selectedUnits.forEach(selectedUnit => {\n          this.engine.attackUnit(selectedUnit.id, unit.id);\n        });\n      }\n    } else if (this.selectedUnits.length > 0) {\n      // Clicked on empty space with units selected - MOVE command\n      this.moveSelectedUnitsTo(position);\n    } else if (!addToSelection) {\n      // Clicked on empty space, clear selection\n      this.selectedUnits = [];\n    }\n  }\n\n  // Move selected units to target position\n  private moveSelectedUnitsTo(targetPos: Position): void {\n    // Arrange units in a rough formation\n    const unitCount = this.selectedUnits.length;\n    const formationSize = Math.ceil(Math.sqrt(unitCount));\n    const spacing = 30; // Space between units\n    \n    this.selectedUnits.forEach((unit, index) => {\n      const row = Math.floor(index / formationSize);\n      const col = index % formationSize;\n      \n      const offsetX = (col - formationSize / 2) * spacing;\n      const offsetY = (row - formationSize / 2) * spacing;\n      \n      const unitTargetPos = {\n        x: targetPos.x + offsetX,\n        y: targetPos.y + offsetY,\n      };\n      \n      this.engine.moveUnit(unit.id, unitTargetPos);\n    });\n  }\n\n  // Select units within a box\n  private selectUnitsInBox(startPos: Position, endPos: Position): void {\n    const state = this.engine.getState();\n    const minX = Math.min(startPos.x, endPos.x);\n    const maxX = Math.max(startPos.x, endPos.x);\n    const minY = Math.min(startPos.y, endPos.y);\n    const maxY = Math.max(startPos.y, endPos.y);\n    \n    // Find all player units in the box\n    const unitsInBox = Object.values(state.units).filter(unit => {\n      if (unit.isDead || unit.playerId !== this.playerId) return false;\n      \n      return (\n        unit.position.x >= minX &&\n        unit.position.x <= maxX &&\n        unit.position.y >= minY &&\n        unit.position.y <= maxY\n      );\n    });\n    \n    // Add units to selection\n    unitsInBox.forEach(unit => {\n      if (!this.selectedUnits.some(u => u.id === unit.id)) {\n        this.selectedUnits.push(unit);\n      }\n    });\n  }\n\n  // Issue a move or attack command to selected units\n  private issueCommand(targetPos: Position): void {\n    const state = this.engine.getState();\n    \n    // Check if the target position is on an enemy unit\n    let targetUnit: Unit | null = null;\n    \n    Object.values(state.units).forEach(unit => {\n      if (unit.isDead || unit.playerId === this.playerId) return;\n      \n      const dx = targetPos.x - unit.position.x;\n      const dy = targetPos.y - unit.position.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      \n      // Simple circular hit detection\n      const hitRadius = unit.type === UnitType.TANK ? 15 : 10;\n      \n      if (distance <= hitRadius) {\n        targetUnit = unit;\n      }\n    });\n    \n    if (targetUnit) {\n      // Attack the target unit\n      this.selectedUnits.forEach(unit => {\n        this.engine.attackUnit(unit.id, targetUnit!.id);\n      });\n    } else {\n      // Move to the target position\n      this.moveSelectedUnitsTo(targetPos);\n    }\n  }\n\n  // Check if the game should end\n  private checkGameOver(): void {\n    const state = this.engine.getState();\n    const activePlayers = Object.values(state.players).filter(player => \n      player.units.length > 0 || \n      player.resources[ResourceType.MONEY] >= 150\n    );\n    \n    if (activePlayers.length <= 1) {\n      this.gameRunning = false;\n      \n      // Draw game over screen\n      const winner = activePlayers.length === 1 ? activePlayers[0].name : \"Nobody\";\n      this.renderer.drawGameOver(winner);\n      \n      // Clean up\n      if (this.animationFrameId !== null) {\n        cancelAnimationFrame(this.animationFrameId);\n        this.animationFrameId = null;\n      }\n    }\n  }\n\n  // Restart the game\n  private restartGame(): void {\n    // Reset game state\n    this.engine = new GameEngine(this.canvas.width, this.canvas.height);\n    this.selectedUnits = [];\n    this.gameRunning = true;\n    \n    // Initialize player\n    this.playerId = this.engine.addPlayer('Player', FactionType.USA);\n    \n    // Add AI opponents\n    this.engine.addPlayer('AI 1', FactionType.CHINA);\n    this.engine.addPlayer('AI 2', FactionType.GLA);\n    \n    // Start game loop\n    this.startGameLoop();\n  }\n} ","import { GameController } from './controller';\nimport { ResourceType } from './types';\n\n// Wait for DOM to be fully loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Get the canvas element\n  const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;\n  if (!canvas) {\n    console.error('Canvas element not found');\n    return;\n  }\n\n  // Set canvas initial size (will be adjusted by renderer)\n  canvas.width = 900;\n  canvas.height = 600;\n\n  // Initialize game controller with canvas and map dimensions\n  const gameController = new GameController(canvas, 900, 600);\n\n  // Set up unit creation buttons\n  const soldierBtn = document.getElementById('soldier-btn');\n  const tankBtn = document.getElementById('tank-btn');\n  const helicopterBtn = document.getElementById('helicopter-btn');\n\n  if (soldierBtn) {\n    soldierBtn.addEventListener('click', () => {\n      gameController.createUnit(0); // 0 = SOLDIER\n    });\n  }\n\n  if (tankBtn) {\n    tankBtn.addEventListener('click', () => {\n      gameController.createUnit(1); // 1 = TANK\n    });\n  }\n\n  if (helicopterBtn) {\n    helicopterBtn.addEventListener('click', () => {\n      gameController.createUnit(2); // 2 = HELICOPTER\n    });\n  }\n\n  // Update the resource display\n  setInterval(() => {\n    const gameState = gameController.getState();\n    if (!gameState || !gameState.players) return;\n    \n    const player = Object.values(gameState.players).find(p => p.id === gameController.getPlayerId());\n    if (!player) return;\n    \n    // Update money display\n    const moneyElement = document.getElementById('money');\n    if (moneyElement) {\n      moneyElement.textContent = player.resources[ResourceType.MONEY].toString();\n    }\n    \n    // Update supplies display\n    const suppliesElement = document.getElementById('supplies');\n    if (suppliesElement) {\n      suppliesElement.textContent = player.resources[ResourceType.SUPPLIES].toString();\n    }\n    \n    // Update unit costs based on player's unit count\n    const unitCount = player.units.length;\n    const soldierCostElement = document.getElementById('soldier-cost');\n    const tankCostElement = document.getElementById('tank-cost');\n    const helicopterCostElement = document.getElementById('helicopter-cost');\n    \n    if (soldierCostElement) {\n      const baseCost = 100;\n      const scaledCost = Math.floor(baseCost * (1 + unitCount * 0.05));\n      soldierCostElement.textContent = scaledCost.toString();\n    }\n    \n    if (tankCostElement) {\n      const baseCost = 300;\n      const scaledCost = Math.floor(baseCost * (1 + unitCount * 0.05));\n      tankCostElement.textContent = scaledCost.toString();\n    }\n    \n    if (helicopterCostElement) {\n      const baseCost = 500;\n      const scaledCost = Math.floor(baseCost * (1 + unitCount * 0.05));\n      helicopterCostElement.textContent = scaledCost.toString();\n    }\n  }, 1000);\n}); "],"names":["byteToHex","i","unsafeStringify","arr","offset","getRandomValues","rnds8","rng","randomUUID","native","v4","options","buf","rnds","_a","UnitType","FactionType","ResourceType","BASE_UNIT_COSTS","UNIT_STATS","RESOURCE_CONFIG","GameEngine","mapWidth","mapHeight","width","height","totalSpots","position","moneyCount","resource","uuidv4","name","faction","playerId","basePosition","playerColors","color","player","unitType","scalingFactor","unitCost","unitId","unitStats","unit","targetPosition","attackerId","targetId","attacker","target","currentTime","deltaTime","targetPos","dx","dy","distance","moveDistance","ratio","damage","u","nearestEnemy","nearestDistance","otherUnit","detectionRange","state","UNIT_SIZE","RESOURCE_SIZE","GameRenderer","canvas","ctx","img","enabled","details","x","y","size","unitImg","angle","healthBarWidth","healthBarHeight","healthPercent","unitCounts","counts","type","count","startPos","endPos","units","winner","GameController","typeIndex","randomOffset","event","rect","gameLoop","currentPos","addToSelection","clickedUnit","hitRadius","selectedUnit","unitCount","formationSize","spacing","index","row","offsetX","offsetY","unitTargetPos","minX","maxX","minY","maxY","targetUnit","activePlayers","gameController","soldierBtn","tankBtn","helicopterBtn","gameState","p","moneyElement","suppliesElement","soldierCostElement","tankCostElement","helicopterCostElement","scaledCost"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}